{"version":3,"file":"bundle.js","sources":["webpack:///webpack/bootstrap 7fca841be2801ecb4109","webpack:///src/Graph.js","webpack:///src/Astar.js","webpack:///src/main.js","webpack:///./node_modules/domready/ready.js","webpack:///src/MinHeap.js","webpack:///src/GridNode.js","webpack:///src/GraphSearch.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7fca841be2801ecb4109","// src/Graph.js\r\nimport GridNode from './GridNode';\r\n\r\nclass Graph {\r\n  constructor(matrix, options = {}) {\r\n    this.nodes = [];\r\n    this.diagonal = !!options.diagonal;\r\n    this.grid = [];\r\n\r\n    // generate grid from matrix\r\n    for (let x = 0; x < matrix.length; x++) {\r\n      this.grid[x] = [];\r\n      for (let y = 0, row = matrix[x]; y < row.length; y++) {\r\n        let node = new GridNode(x, y, row[y]);\r\n        this.grid[x][y] = node;\r\n        this.nodes.push(node);\r\n      }\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  valid(node) {\r\n    if (node.visited || node.closed || node.g !== 100000 || node.f !== node.g || node.h !== 0) {\r\n      console.log(\"wrong\");\r\n    }\r\n  }\r\n\r\n  init() {\r\n    this.dirtyNodes = [];\r\n    for (let i = 0; i < this.nodes.length; i++) {\r\n      this.nodes[i].reset();\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    for (let i = 0; i < this.grid.length; i++) {\r\n      for (let j = 0; j < this.grid.length; j++) {\r\n        let prevW = this.grid[i][j].weight;\r\n        this.grid[i][j].reset();\r\n        console.log(this.grid[i][j].weight, prevW);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  cleanDirty() {\r\n    for (let i = 0; i < this.dirtyNodes.length; i++) {\r\n      this.dirtyNodes[i].reset();\r\n    }\r\n    this.dirtyNodes = [];\r\n  }\r\n\r\n  markDirty(node) {\r\n    this.dirtyNodes.push(node);\r\n  }\r\n\r\n  getNeighbors(node) {\r\n    let grid = this.grid;\r\n    let result = [];\r\n    let x = node.x;\r\n    let y = node.y;\r\n    if (this.grid[x - 1] && this.grid[x - 1][y]) {\r\n      result.push(grid[x - 1][y]);\r\n    }\r\n\r\n    // East\r\n    if (this.grid[x + 1] && this.grid[x + 1][y]) {\r\n      result.push(grid[x + 1][y]);\r\n    }\r\n\r\n    // South\r\n    if (this.grid[x] && this.grid[x][y - 1]) {\r\n      result.push(this.grid[x][y - 1]);\r\n    }\r\n\r\n    // North\r\n    if (this.grid[x] && this.grid[x][y + 1]) {\r\n      result.push(this.grid[x][y + 1]);\r\n    }\r\n\r\n    if (this.diagonal) {\r\n      // Southwest\r\n      if (this.grid[x - 1] && this.grid[x - 1][y - 1]) {\r\n        result.push(this.grid[x - 1][y - 1]);\r\n      }\r\n\r\n      // Southeast\r\n      if (this.grid[x + 1] && this.grid[x + 1][y - 1]) {\r\n        result.push(this.grid[x + 1][y - 1]);\r\n      }\r\n\r\n      // Northwest\r\n      if (this.grid[x - 1] && this.grid[x - 1][y + 1]) {\r\n        result.push(this.grid[x - 1][y + 1]);\r\n      }\r\n\r\n      // Northeast\r\n\r\n      if (this.grid[x + 1] && this.grid[x + 1][y + 1]) {\r\n\r\n        result.push(this.grid[x + 1][y + 1]);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  getNode(point) {\r\n    return this.grid[point[0]][point[1]];\r\n  }\r\n\r\n  toString() {\r\n    let graphString = [];\r\n    const nodes = this.grid;\r\n    for (let x = 0; x < nodes.length; x++) {\r\n      let rowDebug = [];\r\n      let row = nodes[x];\r\n      for (let y = 0; y < row.length; y++) {\r\n        rowDebug.push(row[y].weight);\r\n      }\r\n      graphString.push(rowDebug.join(\" \"));\r\n    }\r\n    return graphString.join(\"\\n\");\r\n  }\r\n}\r\n\r\n\r\nexport default Graph;\n\n\n// WEBPACK FOOTER //\n// src/Graph.js","// src/Astar.js\r\nimport MinHeap from './MinHeap';\r\nimport Graph from './Graph';\r\n\r\n\r\nclass Astar {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  static search(graph, start, end, options = {}) {\r\n    const heuristic = options.heuristic || Astar.manhattan;\r\n    let openList = new MinHeap(function(node1, node2){\r\n      return node1.f - node2.f;\r\n    });\r\n    let closeList = {}; // a set\r\n    start.g = 0;\r\n    openList.offer(start);\r\n    graph.markDirty(start);\r\n\r\n    while (openList.size() > 0) {\r\n      let curr = openList.poll();\r\n      if (curr === end) {\r\n        // success\r\n        return this.getPath(end);\r\n      }\r\n      curr.colsed = true;\r\n      // console.log(\"==============\")\r\n      // console.log(\"[\", curr.x, curr.y, \"]\", curr.g, curr.h, curr.f);\r\n      // console.log(\"--------------\")\r\n      // expanding\r\n      let neighbors = graph.getNeighbors(curr);\r\n      for (let i = 0; i < neighbors.length; i++) {\r\n\r\n        let neighbor = neighbors[i];\r\n        if (neighbor.colsed || (neighbor.isObstacle())) {\r\n          if (!neighbor.closed) {\r\n            // console.log(neighbor.colsed || (neighbor.isObstacle()),neighbor.isObstacle(), neighbor.weight === 0)\r\n          }\r\n          continue;\r\n        }\r\n\r\n        let newG = curr.g + neighbor.getCost(curr);\r\n        let visited = neighbor.visited;\r\n        if (!visited || newG < neighbor.g) {\r\n          neighbor.visited = true;\r\n          neighbor.g = newG;\r\n          neighbor.parent = curr;\r\n          neighbor.h = heuristic(neighbor, end);\r\n          neighbor.f = neighbor.g + neighbor.h;\r\n          graph.markDirty(neighbor);\r\n          // if neighbor not in openList, add it\r\n          if (!visited) {\r\n            // expand this neighbor\r\n            openList.offer(neighbor);\r\n          } else {\r\n            // decrease the key of neighbor\r\n            openList.decreaseKey(neighbor)\r\n          }\r\n        }\r\n\r\n        // console.log(\"[\", neighbor.x, neighbor.y, \"]\", neighbor.g, neighbor.h, neighbor.f);\r\n      }\r\n    }\r\n    console.log(\"can not reach the goal\");\r\n    return [];\r\n\r\n  }\r\n\r\n  static manhattan(p1, p2) {\r\n    return Math.abs(p1.x - p2.x) + Math.abs(p1.y - p2.y);\r\n  }\r\n\r\n  static diagonal(p1, p2) {\r\n    let D = 1;\r\n    let D2 = Math.sqrt(2);\r\n    let d1 = Math.abs(pos1.x - pos0.x);\r\n    let d2 = Math.abs(pos1.y - pos0.y);\r\n    return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));\r\n  }\r\n\r\n  static cleanNode(node) {\r\n\r\n    node.g = 100000;\r\n    node.h = 0;\r\n    node.f = this.g + this.h;\r\n    node.visited = false;\r\n    node.closed = false;\r\n    node.parant = null;\r\n  }\r\n\r\n  static getPath(node) {\r\n    let curr = node;\r\n    let path = [];\r\n    while (curr.parent) {\r\n      path.unshift(curr);\r\n      curr = curr.parent;\r\n    }\r\n    return path;\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Astar;\n\n\n// WEBPACK FOOTER //\n// src/Astar.js","import domready from 'domready';\r\n\r\nimport Astar from './Astar';\r\nimport Graph from './Graph';\r\nimport GraphSearch from './GraphSearch'\r\n\r\n\r\n\r\n\r\n\r\ndomready(function() {\r\n\r\n  let row = 20;\r\n  let width = 640 / row;\r\n  let lineWith = 1;\r\n  let w = width - lineWith * 2;\r\n  let r = ~~((width - lineWith * 2) / 3);\r\n  let p = 0.2;\r\n\r\n  const defaultColor = \"#e3e3e3\";\r\n\r\n  const canvas = document.getElementById(\"canvas\");\r\n  const searchBtn = document.getElementById('search');\r\n  const resetBtn = document.getElementById('reset');\r\n  const frequency = document.getElementById('frequency');\r\n  const gridSize = document.getElementById('gridSize');\r\n  const option = {\r\n    canvas,\r\n    searchBtn,\r\n    resetBtn,\r\n    frequency,\r\n    gridSize,\r\n    row,\r\n    width,\r\n    lineWith,\r\n    r,\r\n    p,\r\n    defaultColor,\r\n    diagonal: false\r\n  };\r\n\r\n  const graphSearch = new GraphSearch(option);\r\n\r\n\r\n});\n\n\n// WEBPACK FOOTER //\n// src/main.js","/*!\n  * domready (c) Dustin Diaz 2014 - License MIT\n  */\n!function (name, definition) {\n\n  if (typeof module != 'undefined') module.exports = definition()\n  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)\n  else this[name] = definition()\n\n}('domready', function () {\n\n  var fns = [], listener\n    , doc = document\n    , hack = doc.documentElement.doScroll\n    , domContentLoaded = 'DOMContentLoaded'\n    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)\n\n\n  if (!loaded)\n  doc.addEventListener(domContentLoaded, listener = function () {\n    doc.removeEventListener(domContentLoaded, listener)\n    loaded = 1\n    while (listener = fns.shift()) listener()\n  })\n\n  return function (fn) {\n    loaded ? setTimeout(fn, 0) : fns.push(fn)\n  }\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/domready/ready.js\n// module id = 3\n// module chunks = 0","// src/MinHeap.js\r\n\r\n\r\nclass MinHeap {\r\n  constructor(comparefunction) {\r\n    this.cmp = comparefunction;\r\n    this.list = [];\r\n  }\r\n\r\n  offer(element) {\r\n    this.list.push(element);\r\n    // bubble up\r\n    this.bubbleUp(this.list.length - 1);\r\n  }\r\n\r\n  poll() {\r\n    const first = this.list[0];\r\n    const last = this.list.pop();\r\n\r\n    if (this.list.length > 0) {\r\n      this.list[0] = last;\r\n      this.percolateDown(0);\r\n    }\r\n    return first;\r\n  }\r\n\r\n  peek() {\r\n    return this.list[0];\r\n  }\r\n\r\n  bubbleUp(index) {\r\n    const element = this.list[index];\r\n    while (index > 0) {\r\n      const parentIndex = ((index -1) >> 1);\r\n      const parent = this.list[parentIndex];\r\n      if (this.cmp(element, parent) < 0) {\r\n        this.list[index] = parent;\r\n        index = parentIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    this.list[index] = element;\r\n\r\n  }\r\n\r\n  percolateDown(index) {\r\n    const element = this.list[index];\r\n\r\n    while (2 * index + 1 < this.list.length) {\r\n      const child1 = 2 * index + 1;\r\n      const child2 = child1 + 1;\r\n      const smaller = (child2 >= this.list.length || this.cmp(this.list[child1], this.list[child2]) <= 0) ? child1 : child2;\r\n\r\n      if (this.cmp(element, this.list[smaller]) > 0) {\r\n        this.list[index] = this.list[smaller];\r\n        index = smaller;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    this.list[index] = element;\r\n  }\r\n\r\n  decreaseKey(element) {\r\n    // get index\r\n    let index = this.getIndexOfElement(element);\r\n    if(index !== undefined) {\r\n      this.bubbleUp(index);\r\n    }\r\n  }\r\n\r\n  getIndexOfElement(element) {\r\n    let i;\r\n    for (i = 0; i < this.size(); i++) {\r\n      if (this.list[i] === element) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n  size() {\r\n    return this.list.length;\r\n  }\r\n\r\n  toString() {\r\n    return this.list.join(', ');\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default MinHeap;\n\n\n// WEBPACK FOOTER //\n// src/MinHeap.js","\r\nclass GridNode {\r\n  constructor(x, y, weight) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.weight = weight;\r\n\r\n\r\n    this.g = 100000;\r\n    this.h = 0;\r\n    this.f = this.g + this.h;\r\n    this.closed = false;\r\n    this.visited = false;\r\n    this.parent = null;\r\n  }\r\n\r\n  toString() {\r\n    return '[' + this.x + ' ' + this.y + ']';\r\n  }\r\n\r\n  isObstacle() {\r\n    return this.weight === 0;\r\n  }\r\n\r\n  reset() {\r\n    this.g = 100000;\r\n    this.h = 0;\r\n    this.f = this.g + this.h;\r\n    this.closed = false;\r\n    this.visited = false;\r\n    this.parent = null;\r\n  }\r\n\r\n\r\n\r\n  getCost(neighbor) {\r\n    // if current node and its neighbor are in diagonal\r\n    if (neighbor && this.x !== neighbor.x && this.y !== neighbor.y) {\r\n      return this.weight * 1.414;\r\n    } else {\r\n      return this.weight;\r\n    }\r\n  }\r\n}\r\n\r\nexport default GridNode;\n\n\n// WEBPACK FOOTER //\n// src/GridNode.js","/**\r\n * Created by Yun on 1/24/2018.\r\n */\r\nimport Astar from './Astar';\r\nimport Graph from './Graph';\r\n\r\n\r\nclass GraphSearch {\r\n\r\n  static generateMatrix(row, p = 0.2) {\r\n    let result = [];\r\n    for (let i = 0; i < row; i++) {\r\n      result[i] = [];\r\n      for (let j = 0; j < row; j++) {\r\n        if (Math.random() < p) {\r\n          result[i][j] = 0;\r\n        } else {\r\n          result[i][j] = 1;\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  static drawRect(ctx, x, y, w, h, r, color) {\r\n    color = color || \"#e3e3e3\";\r\n    ctx.beginPath();\r\n    ctx.moveTo(x, y + r);\r\n    ctx.lineTo(x, y + h - r);\r\n    ctx.arcTo(x, y + h, x + r, y + h, r);\r\n    ctx.lineTo(x + w - r, y + h);\r\n    ctx.arcTo(x + w, y + h, x + w, y + h-r, r);\r\n    ctx.lineTo(x + w, y + r);\r\n    ctx.arcTo(x + w, y, x + w - r, y, r);\r\n    ctx.lineTo(x + r, y);\r\n    ctx.arcTo(x, y, x, y + r, r);\r\n    ctx.fillStyle = color;\r\n    ctx.fill();\r\n  }\r\n\r\n  constructor(option = {}) {\r\n    if (!option.canvas) {\r\n      throw \"No canvas found\";\r\n    }\r\n    this.option = option;\r\n    this.diagonal = !!option.diagonal;\r\n    this.row = option.row;\r\n    this.width = option.width;\r\n    this.lineWith = option.lineWith;\r\n    this.r = option.r;\r\n    this.w = this.width - this.lineWith * 2;\r\n    this.p = option.p;\r\n    this.canvas = option.canvas;\r\n    this.ctx = option.canvas.getContext('2d');\r\n    this.searchBtn = option.searchBtn;\r\n    this.resetBtn = option.resetBtn;\r\n    this.gridSize = option.gridSize;\r\n    this.frequency = option.frequency;\r\n    this.defaultColor = option.defaultColor;\r\n\r\n    this.init = this.init.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this.prevPath = [];\r\n\r\n    this.init();\r\n    this.bindEventListner();\r\n  }\r\n\r\n  init() {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.resetDimensions();\r\n    this.start = null;\r\n    this.end = null;\r\n    this.prevPath = [];\r\n    this.matrix = this.constructor.generateMatrix(this.row, this.p);\r\n    this.graph = new Graph(this.matrix, {diagonal: this.diagonal});\r\n    this.draw();\r\n  }\r\n\r\n  drawByIndex(x, y, color) {\r\n\r\n    let width = this.width;\r\n    let w = this.w;\r\n    let r = this.r;\r\n    let ctx = this.ctx;\r\n    let lineWidth = this.lineWith;\r\n\r\n    this.constructor.drawRect(ctx, x * width + lineWidth, y * width + lineWidth, w, w, r, color);\r\n  }\r\n\r\n  bindEventListner() {\r\n    this.canvas.addEventListener('click', (event) => {\r\n      // do, check new start and goal, check\r\n      const rect = canvas.getBoundingClientRect();\r\n      let x = ~~ ((event.clientX - rect.left) / this.width);\r\n      let y = ~~ ((event.clientY - rect.top) / this.width);\r\n      this.updateDes([x, y]);\r\n    }, false);\r\n\r\n    this.searchBtn.addEventListener('click', (event) => {\r\n      let path = this.search();\r\n      console.log(this.start, this.end);\r\n      console.log(path);\r\n      if (path.length) {\r\n        for (let i = 0; i < path.length - 1; i++ ) {\r\n          let node = path[i];\r\n          this.drawByIndex(node.x, node.y, \"#ed904e\")\r\n        }\r\n      }\r\n    }, false);\r\n\r\n    this.resetBtn.addEventListener('click', (event) => {\r\n      console.log(\"reset\");\r\n      this.init();\r\n    }, false);\r\n  }\r\n\r\n  resetDimensions() {\r\n    this.p = +(this.frequency.value) || this.p;\r\n    this.row = +(this.gridSize.value) || this.row;\r\n    this.width = 640 / this.row;\r\n    this.w = this.width - this.lineWith * 2;\r\n    this.r = ~~((this.width - this.lineWith * 2) / 3);\r\n  }\r\n\r\n  reset() {\r\n    this.init();\r\n  }\r\n\r\n  clearPrevPath() {\r\n    for (let i = 0; i < this.prevPath.length - 1; i++) {\r\n      let node = this.prevPath[i];\r\n      this.drawByIndex(node.x, node.y, \"#e3e3e3\");\r\n    }\r\n    this.prevPath = [];\r\n  }\r\n\r\n\r\n  updateDes(point) {\r\n    let width = this.width;\r\n    let lineWith = this.lineWith;\r\n    let r = this.r;\r\n    let w = this.w;\r\n    const node = this.graph.getNode(point);\r\n    if (!node.isObstacle()) {\r\n      if (this.end) {\r\n        let temp = this.start;\r\n        this.start = this.end;\r\n        this.end = node;\r\n        this.drawByIndex(this.start.x, this.start.y, \"#42f4c8\");\r\n        this.drawByIndex(this.end.x, this.end.y, \"#ed4d95\");\r\n        this.drawByIndex(temp.x, temp.y, \"#e3e3e3\");\r\n      } else if(this.start) {\r\n        this.end = node;\r\n        this.drawByIndex(point[0], point[1], \"#ed4d95\")\r\n      } else  {\r\n        this.start = node;\r\n        this.drawByIndex(point[0], point[1], \"#42f4c8\");\r\n      }\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    let width = this.width;\r\n    let lineWith = this.lineWith;\r\n    let r = this.r;\r\n    let w = this.w;\r\n    for (let i = 0; i < this.row; i++) {\r\n      for (let j = 0; j < this.row; j++) {\r\n        if (this.matrix[i][j] === 1) {\r\n          this.constructor.drawRect(this.ctx, i * width + 1, j * width + 1, w , w, r);\r\n        } else {\r\n          this.constructor.drawRect(this.ctx, i * width + lineWith, j * width + lineWith, w , w, r, \"#333333\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  search() {\r\n    // clear previous result\r\n    if (this.start && this.end) {\r\n      this.prevPath = Astar.search(this.graph, this.start, this.end);\r\n      return this.prevPath;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default GraphSearch;\n\n\n// WEBPACK FOOTER //\n// src/GraphSearch.js"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7DA;AACA;AACA;AADA;AACA;;;;;;;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;;;;;;;;;;;;;AC/HA;AACA;AACA;AADA;AACA;;;AAAA;AACA;;;;;;;AAEA;AACA;AAAA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAKA;;;;;;;;;ACxGA;AACA;;;AACA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAcA;AAGA;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AAKA;;;;;;;;;;;;;;;;;AC1FA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;;;;;;;;;;;;;AC7CA;;;;;AAGA;AACA;;;AAAA;AACA;;;;;;;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAKA;;;A","sourceRoot":""}